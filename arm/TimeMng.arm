remaining:
           _lea  x6, limits
            add  x7, x6, x21, lsl 2
            ldr  w0, [x7, Limits.time]
            ldr  w1, [x7, Limits.incr]
           _lea  x7, options
            ldr  w2, [x7, Options.moveOverhead]
            ldr  w3, [x6, Limits.movestogo]

            cmp  w0, 0
            ble  .L17
          scvtf  d1, w1
            sub  w1, w4, 25
          scvtf  d0, w1
           _lea  x1, .LC3
           fmov  d4, 1.0e+0
          scvtf  d5, w0
            ldr  d2, [x1]
           _lea  x1, .LC4
            ldr  d3, [x1]
           _lea  x1, .LC0
           fmul  d2, d0, d2
          fmsub  d0, d0, d2, d3
            ldr  d2, [x1]
          fcmpe  d0, d2
          fcsel  d0, d0, d2, gt
           fmul  d1, d1, d0
            cbz  w3, .L5
            cmp  w5, 0
           fmov  d2, 6.0e+0
            mov  w1, 50
          fcsel  d2, d2, d4, ne
            cmp  w3, 49
           csel  w1, w3, w1, le
            cmp  w4, 40
          scvtf  d0, w1
           fdiv  d0, d2, d0
           fmov  d2, 1.5e+0
            bgt  .L24
            sub  w4, w4, 20
           _lea  x1, .LC5
          scvtf  d2, w4
            ldr  d3, [x1]
           _lea  x1, .LC6
            ldr  d6, [x1]
           fmul  d3, d2, d3
          fmsub  d2, d2, d3, d6
.L24:
            cmp  w3, 1
           fmul  d2, d0, d2
            ble  .L10
           fmov  d0, 7.5e-1
          fcmpe  d2, d0
          fcsel  d2, d2, d0, mi
.L10:
           fmov  d0, 8.5e+0
           fmul  d0, d5, d0
           fdiv  d0, d1, d0
           fadd  d0, d0, d4
           fmul  d0, d0, d2
.L13:
          fcmpe  d0, d4
           fmov  d1, 1.0e+0
          fcsel  d0, d0, d1, mi
           subs  w0, w0, w2
           csel  w0, w0, wzr, pl
          scvtf  d1, w0
           fmul  d0, d1, d0
         fcvtzs  w0, d0
            ret
.L5:
            mov  w1, 20
          scvtf  d2, w4
            cmp  w5, 0
            mul  w1, w4, w1
          scvtf  d3, w1
           _lea  x1, .LC7
            ldr  d0, [x1]
           _lea  x1, .LC1
           fadd  d2, d2, d0
           fdiv  d2, d3, d2
            ldr  d3, [x1]
           _lea  x1, .LC2
            ldr  d0, [x1]
          fcsel  d3, d0, d3, eq
           fdiv  d0, d1, d5
           fadd  d2, d2, d4
           fadd  d0, d0, d2
           fmul  d0, d0, d3
              b  .L13
.L17:
            mov  w0, 0
            ret
.LC0:
  dd 0
  dd 1078689792
.LC1:
  dd 515396076
  dd 1068624773
.LC2:
  dd 2954937500
  dd 1066494066
.LC3:
  dd 3951369912
  dd 1069463633
.LC4:
  dd 0
  dd 1079902208
.LC5:
  dd 3539053052
  dd 1062232653
.LC6:
  dd 2576980378
  dd 1072798105
.LC7:
  dd 0
  dd 1082081280




TimeMng_Init:
            stp  x21, x30, [sp, -16]!
            stp  x22, x23, [sp, -16]!
            mov  w21, w1
            mov  w22, w2
           _lea  x23, time
           _lea  x6, limits
            ldr  x0, [x6, Limits.startTime]
            str  x0, [x23, Time.startTime]
            mov  w4, w22
            mov  w5, 0
             bl  remaining
           _lea  x6, options
            add  x1, x0, x0, lsr 2
           ldrb  w4, [x6, Options.ponder]
            tst  w4, w4
           csel  x0, x1, x0, ne
            str  x0, [x23, Time.optimumTime]
            mov  w4, w22
            mov  w5, 1
             bl  remaining
            str  x0, [x23, Time.maximumTime]
            ldp  x22, x23, [sp], 16
            ldp  x21, x30, [sp], 16
            ret
